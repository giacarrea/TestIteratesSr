@page "/"
@using System.Text.Json.Serialization
@using EventBlazorApp.Models
@using System.Text.Json

@rendermode InteractiveServer

@inject HttpClient Http
@inject AuthSessionService AuthSession
@inject IJSRuntime JS

<h3>Event Registration</h3>

@if (!string.IsNullOrEmpty(_error))
{
    if (AuthSession.IsAuthenticated)
    {
        <button class="btn btn-secondary mb-2" @onclick="Logout">Logout</button>
    }

    <div class="alert alert-danger">
        <strong>Error:</strong> @(_error)
    </div>
    <button class="btn btn-outline-secondary mb-2" @onclick="RefreshPage">Ok</button>
}
else if(!_loaded)
{
    <p>Loading...</p>
}
else if (!AuthSession.IsAuthenticated)
{
    <EditForm Model="loginModel" OnValidSubmit="LoginAsync" FormName="LoginForm">
        <DataAnnotationsValidator />
        <ValidationSummary />
        <div>
            <label>Username:</label>
            <InputText @bind-Value="loginModel.Username" />
        </div>
        <div>
            <label>Password:</label>
            <InputText @bind-Value="loginModel.Password" type="password" />
        </div>
        <button type="submit" class="btn btn-primary">Login</button>
        @if (!string.IsNullOrEmpty(loginError))
        {
            <div class="text-danger">@loginError</div>
        }
    </EditForm>
}
else
{
    <h4>Welcome, @AuthSession.Username!</h4>
    @if (AuthSession.IsAdmin)
    {
        <p style="color: #00ff00; font-weight: bold;">[Admin privilege granted]</p>
    }

    <button class="btn btn-secondary mb-2" @onclick="Logout">Logout</button>
    <h4>Events</h4>
    @if (events == null)
    {
        <p>Loading events...</p>
    }
    else
    {
        if (AuthSession.IsAdmin)
        {
            <button class="btn btn-primary mb-3" @onclick="ShowCreateEventModal">Create Event</button>
        }

        <ul class="list-group">
            @foreach (var ev in events)
            {
                <li class="list-group-item d-flex justify-content-between align-items-center">
                    <span>
                        <b>@ev.Title</b> - @ev.Date.ToShortDateString() <span>Remaining seats: @ev.RegistrationList.Registrations.Count / @ev.Capacity </span>
                    </span>

                    @if(ev.Status != 2)
                    {
                        @if (ev.IsRegistered)
                        {
                            <button class="btn btn-danger btn-sm" @onclick="() => Unregister(ev.Id)">Unregister</button>
                        }
                        else
                        {
                            <button class="btn btn-success btn-sm" @onclick="() => Register(ev.Id)">Register</button>
                        }
                    }

                    @if (AuthSession.IsAdmin)
                    {
                        <button class="btn btn-secondary btn-sm me-2" @onclick="() => ShowEditEventModal(ev)">Edit</button>
                        <button class="btn btn-warning btn-sm" @onclick="() => DeleteEvent(ev.Id)">Delete</button>
                    }
                </li>
            }
        </ul>
    }
}

@* Modal for Create/Edit Event *@
@if (showEventModal)
{
    <div class="modal show d-block" tabindex="-1" style="background:rgba(0,0,0,0.5)">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">@((editingEvent?.Id == Guid.Empty) ? "Create Event" : "Edit Event")</h5>
                    <button type="button" class="btn-close" @onclick="CloseEventModal"></button>
                </div>
                <EditForm Model="editingEvent" OnValidSubmit="SaveEventAsync">
                    <DataAnnotationsValidator />
                    <div class="modal-body">
                        <div class="mb-2">
                            <label>Title</label>
                            <InputText class="form-control" @bind-Value="editingEvent.Title" />
                        </div>
                        <div class="mb-2">
                            <label>Description</label>
                            <InputText class="form-control" @bind-Value="editingEvent.Description" />
                        </div>
                        <div class="mb-2">
                            <label>Date</label>
                            <InputDate class="form-control" @bind-Value="editingEvent.Date" />
                        </div>
                        <div class="mb-2">
                            <label>Location</label>
                            <InputText class="form-control" @bind-Value="editingEvent.Location" />
                        </div>
                        <div class="mb-2">
                            <label>Category</label>
                            <InputText class="form-control" @bind-Value="editingEvent.Category" />
                        </div>
                        <div class="mb-2">
                            <label>Capacity</label>
                            <InputNumber class="form-control" @bind-Value="editingEvent.Capacity" />
                        </div>
                    </div>
                    <div class="modal-footer">
                        <button type="submit" class="btn btn-primary">Save</button>
                        <button type="button" class="btn btn-secondary" @onclick="CloseEventModal">Cancel</button>
                    </div>
                </EditForm>
            </div>
        </div>
    </div>
}

@code {
    const string ApiBaseUrl = "https://localhost:7296";

    // State

    [SupplyParameterFromForm]
    LoginModel loginModel { get; set; }
    string? loginError;
    List<EventDto>? events;

    private bool _loaded = false;
    private string? _error = null;

    bool showEventModal = false;
    EventDto? editingEvent;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            loginModel ??= new();
            await AuthSession.LoadAsync(); // JS interop is now safe
            await TryLoadEvents();
            _loaded = true;
            StateHasChanged(); // Ensure UI updates after loading
        }
    }

    protected override async Task OnInitializedAsync()
    {
        loginModel ??= new();
        //AuthSession.LoadAsync();
        //await TryLoadEvents();
    }

    async Task LoginAsync()
    {
        loginError = null;
        var response = await Http.PostAsJsonAsync($"{ApiBaseUrl}/api/auth/login", loginModel);
        if (response.IsSuccessStatusCode)
        {
            var rawContent = await response.Content.ReadAsStringAsync();

            var result = await response.Content.ReadFromJsonAsync<LoginResult>();
            AuthSession.JwtToken = result?.Token;
            AuthSession.Username = loginModel.Username;
            AuthSession.IsAdmin = result?.RoleList.Roles.Contains("Admin") ?? false;
            await AuthSession.SaveAsync();
            Http.DefaultRequestHeaders.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", AuthSession.JwtToken);
            await LoadEvents();
        }
        else
        {
            loginError = "Invalid username or password.";
        }
    }

    async Task Logout()
    {
        AuthSession.Clear();
        await AuthSession.ClearAsync();
        Http.DefaultRequestHeaders.Authorization = null;
        events = null;
    }

    async Task TryLoadEvents()
    {
        if (AuthSession.IsAuthenticated)
        {
            Http.DefaultRequestHeaders.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", AuthSession.JwtToken);
            await LoadEvents();
        }
    }

    async Task LoadEvents()
    {
        try
        {
            var rawResponse = await Http.GetAsync($"{ApiBaseUrl}/api/event");
            var rawContent = await rawResponse.Content.ReadAsStringAsync();

            var eventListDto = JsonSerializer.Deserialize<EventListDto>(rawContent);
            var eventList = eventListDto?.Events;
            //var eventList = await Http.GetFromJsonAsync<List<EventDto>>($"{ApiBaseUrl}/api/event");

            // For demo: Assume API returns all events, and you need to check registration status per event            
            foreach (var ev in eventList ?? Enumerable.Empty<EventDto>())
            {                
                var rawRegResponse = await Http.GetAsync($"{ApiBaseUrl}/api/event/{ev.Id}/registrations");
                var rawRegContent = await rawRegResponse.Content.ReadAsStringAsync();
                var regListDto = JsonSerializer.Deserialize<RegistrationList>(rawRegContent);
                var regs = regListDto?.Registrations;   

                ev.IsRegistered = regs?.Any(r => r.UserId == AuthSession.Username) ?? false;
            }
            events = eventList;

            _error = null;
        }
        catch(Exception ex)
        {
            _error = $"Failed to load events: {ex.Message}";
            events = new List<EventDto>();
        }
        StateHasChanged();
    }

    async Task Register(Guid eventId)
    {
        try
        {
            var resp = await Http.PostAsync($"{ApiBaseUrl}/api/event/{eventId}/registrations", null);
            if (resp.IsSuccessStatusCode)
            {
                await LoadEvents();
            }
            else
            {
                var errorMessage = await resp.Content.ReadAsStringAsync();
                _error = $"Failed to register: {errorMessage}";
            }
        }
        catch (Exception ex)
        {
            _error = $"An error occurred during registration: {ex.Message}";
        }
    }

    async Task Unregister(Guid eventId)
    {
        try
        {
            var resp = await Http.DeleteAsync($"{ApiBaseUrl}/api/event/{eventId}/registrations");
            if (resp.IsSuccessStatusCode)
            {
                await LoadEvents();
            }
            else
            {
                var errorMessage = await resp.Content.ReadAsStringAsync();
                _error = $"Failed to unregister: {errorMessage}";
            }
        }
        catch (Exception ex)
        {
            _error = $"An error occurred during unregistration: {ex.Message}";
        }
    }

    async Task DeleteEvent(Guid eventId)
    {
        var confirm = await JS.InvokeAsync<bool>("confirm", "Are you sure you want to delete this event?");
        if (!confirm)
            return;

        try
        {
            var resp = await Http.DeleteAsync($"{ApiBaseUrl}/api/event/{eventId}");
            if (resp.IsSuccessStatusCode)
            {
                await LoadEvents();
            }
            else
            {
                var errorMessage = await resp.Content.ReadAsStringAsync();
                _error = $"Failed to delete event: {errorMessage}";
            }
        }
        catch (Exception ex)
        {
            _error = $"An error occurred while deleting the event: {ex.Message}";
        }
    }


    void ShowCreateEventModal()
    {
        editingEvent = new EventDto
            {
                Id = Guid.Empty,
                Title = "",
                Description = "",
                Date = DateTime.Today.AddDays(1),
                Location = "",
                Category = "",
                Capacity = 1,
                Status = 1,
                RegistrationList = new RegistrationList { Registrations = new() }
            };
        showEventModal = true;
    }

    void ShowEditEventModal(EventDto ev)
    {
        // Clone to avoid editing the list directly before save
        editingEvent = new EventDto
            {
                IdRef = ev.IdRef,
                Id = ev.Id,
                Title = ev.Title,
                Description = ev.Description,
                Date = ev.Date,
                Location = ev.Location,
                Category = ev.Category,
                Capacity = ev.Capacity,
                Status = ev.Status,
                RegistrationList = ev.RegistrationList
            };
        showEventModal = true;
    }

    void CloseEventModal()
    {
        showEventModal = false;
        editingEvent = null;
    }

    async Task SaveEventAsync()
    {
        if (editingEvent == null)
            return;

        var serializedJson = JsonSerializer.Serialize(editingEvent);

        try
        {
            if (editingEvent.Id == Guid.Empty)
            {   
                editingEvent.Id = Guid.NewGuid();

                // Create
                var resp = await Http.PostAsJsonAsync($"{ApiBaseUrl}/api/event", editingEvent);
                if (!resp.IsSuccessStatusCode)
                {
                    var errorMessage = await resp.Content.ReadAsStringAsync();
                    _error = $"Failed to create event: {errorMessage}";
                    return;
                }
            }
            else
            {
                // Edit
                var resp = await Http.PutAsJsonAsync($"{ApiBaseUrl}/api/event/{editingEvent.Id}", editingEvent);
                if (!resp.IsSuccessStatusCode)
                {
                    var errorMessage = await resp.Content.ReadAsStringAsync();
                    _error = $"Failed to update event: {errorMessage}";
                    return;
                }
            }
            showEventModal = false;
            await LoadEvents();
        }
        catch (Exception ex)
        {
            _error = $"An error occurred while saving the event: {ex.Message}";
        }
    }

    async Task RefreshPage()
    {
        _error = null;
        await LoadEvents();
    }
}